
-- players collection join with another collection using lookup
db.players.insertMany([
{ "name": "John", "age": 30, "score": 80 },
{ "name": "Alice", "age": 25, "score": 90 },
{ "name": "Bob", "age": 20, "score": 70 }
])



db.players.aggregate([{$group: {_id: null, avg: {$sum: 1}}}])
db.players.find().count()

db.players.aggregate([{$group: {_id: null, avg: {$max: "$score"}}}])
db.players.aggregate([{$group: {_id: null, avg: {$min: "$score"}}}])
test> db.players.aggregate([{$group: {_id: null, avg: {$avg: "$score"}}}])

-- $out
db.students.insertMany([
  { name: "Arun", score: 85 },
  { name: "Dijo", score: 75 },
  { name: "Jose", score: 95 }
])
db.students.aggregate([
  {
    $match: { score: { $gte: 80 } }
  },
  {
    $out: "high_scores"
  }
])
db.students.aggregate([
  {
    $project: {
      name: 1,
      result: {
        $cond: {
          if: { $gte: ["$score", 80] },
          then: "Pass",
          else: "Fail"
        }
      }
    }
  }
])
$filter
The $filter operator allows you to iterate over an array and keep only the elements that match a condition.
	db.players.insertMany([
	  { name: "Dijo", scores: [10, 20, 30] },
	  { name: "Jose", scores: [15, 25, 35] }
	])
db.players.aggregate([
  {
    $project: {
      name: 1,
      highScores: {
        $filter: {
          input: "$scores",
          as: "score",
          cond: { $gt: ["$$score", 20] }
        }
      }
    }
  }
])

$arrayElemAt retrieves the element at index 0 from the scores array.
db.players.aggregate([
  {
    $project: {
      name: 1,
      firstScore: { $arrayElemAt: ["$scores", 0] }
    }
  }
])
The $slice operator allows you to return a subset of an array.

db.players.aggregate([
  {
    $project: {
      name: 1,
      firstTwoScores: { $slice: ["$scores", 2] }
    }
  }
])



Using addFields to Add a New Array Field
db.employees.updateMany(
  {},
  { $addFields: { newGrades: [{ subject: "History", score: 80 }] } }
)
Using push to Append an Element to an Array Field

db.employees.updateMany(
  {},
  { $push: { grades: { subject: "History", score: 80 } } }
)
Using $all to Match Documents with Specific Elements in an Array

db.employees.find(
  { grades: { $all: [{ subject: "Math", score: 85 }] } }
)
Using $elemMatch to Match Documents Based on Conditions within an Array
db.employees.find(
  { grades: { $elemMatch: { subject: "Math", score: { $gt: 80 } } } }
)
Using rename to Rename a Field
db.employees.updateMany(
  {},
  { $rename: { "grades": "courseGrades" } }
)


db.employees.insertMany([
  {
    "name": "John",
    "grades": [
      { "subject": "Math", "score": 85 },
      { "subject": "English", "score": 90 },
      { "subject": "Science", "score": 80 }
    ]
  },
  {
    "name": "Dijo",
    "grades": [
      { "subject": "Math", "score": 78 },
      { "subject": "English", "score": 95 },
      { "subject": "Science", "score": 85 }
    ]
  },
  {
    "name": "Jose",
    "grades": [
      { "subject": "Math", "score": 82 },
      { "subject": "English", "score": 88 },
      { "subject": "Science", "score": 79 }
    ]
  }
])


db.employees.aggregate([
  { $unwind: "$grades" },
  { $group: { _id: "$grades.subject", averageScore: { $avg: "$grades.score" } } }
])

map

db.students.aggregate([
  {
    $project: {
      name: 1,
      doubledScores: {
        $map: {
          input: "$scores",
          as: "score",
          in: { $multiply: ["$$score", 2] }
        }
      }
    }
  }
])

db.players.aggregate([
  {
    $project: {
      name: 1,
      totalScore: {
        $reduce: {
          input: "$scores",
          initialValue: 0,
          in: { $add: ["$$value", "$$this"] }
        }
      }
    }
  }
])










db.players.aggregate([
    {
        $facet: {
            "age_stats": [
                { $bucket: { groupBy: "$age", boundaries: [ 0, 20, 30, 40 ], default: "Other", output: { "count": { $sum: 1 } } } }
            ],
            "score_stats": [
                { $bucket: { groupBy: "$score", boundaries: [ 0, 60, 70, 80, 90, 100 ], default: "Other", output: { "count": { $sum: 1 } } } }
            ]
        }
    }
])


db.players.aggregate([
  {
    $facet: {
      "sortedByAge": [
        { $sort: { age: 1 } }
      ],
      "averageScore": [
        { $group: { _id: null, avgScore: { $avg: "$score" } } },
        { $project: { _id: 0, avgScore: 1 } }
      ]
    }
  }
])



